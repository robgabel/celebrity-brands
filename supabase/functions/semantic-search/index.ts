import { createClient } from 'npm:@supabase/supabase-js@2.39.7';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

Deno.serve(async (req) => {
  // Always return proper CORS headers for OPTIONS requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { 
      headers: { ...corsHeaders },
      status: 204
    });
  }

  try {
    console.log('üöÄ Semantic search function started');

    // Validate environment variables
    const supabaseUrl = Deno.env.get('SUPABASE_URL');
    const supabaseKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY');
    const openAiKey = Deno.env.get('OPENAI_API_KEY');

    console.log('üîß Environment check:', {
      supabaseUrl: !!supabaseUrl,
      supabaseKey: !!supabaseKey,
      openAiKey: !!openAiKey
    });

    if (!supabaseUrl || !supabaseKey || !openAiKey) {
      console.error('‚ùå Missing environment variables');
      throw new Error('Missing required environment variables');
    }

    // Parse request body
    let body;
    try {
      body = await req.json();
      console.log('üì• Request body received:', body);
    } catch (e) {
      console.error('‚ùå Failed to parse request body:', e);
      throw new Error('Invalid JSON in request body');
    }

    if (!body || !body.query) {
      console.error('‚ùå No query provided in request');
      return new Response(
        JSON.stringify({ 
          error: 'Search query is required' 
        }), {
          status: 400,
          headers: {
            'Content-Type': 'application/json',
            ...corsHeaders,
          },
        }
      );
    }

    const { query } = body;
    console.log('üîç Search query:', query);

    // TEMPORARY: Test with known working embedding for "happi"
    if (query.toLowerCase() === 'happi') {
      console.log('üß™ Using known working embedding for HAPPI test');
      const knownWorkingEmbedding = [0.00513391,0.01769116,0.00325504,-0.01243236,-0.03924236,-0.00324323,-0.00839127,-0.04062987,0.01025434,0.01234099,0.02410077,-0.00361808,0.00931082,0.02766289,0.02840412,0.02396056,0.01508343,0.00825995,0.00803127,-0.00985084,0.00655,-0.01804845,-0.01997213,0.00182479,0.01997135,0.00324928,0.00370006,0.00995625,-0.00007312,0.01794511,0.01315328,0.04125587,-0.03012215,-0.01542623,-0.01945047,-0.01547095,-0.02512911,0.04006350,-0.00651702,-0.01948450,0.02316171,0.00288217,-0.03410167,0.00151284,-0.01821339,0.00706104,0.01492693,-0.03454880,0.04501182,-0.01322036,-0.03219446,-0.00227853,-0.02384732,-0.00670203,-0.01159462,-0.01954461,-0.00288403,0.00750818,0.01321290,-0.01484495,-0.00007354,-0.02025014,-0.01461393,-0.00063761,0.01918219,0.02338528,0.00194318,-0.02526325,-0.04891682,-0.00819006,0.01234567,0.02345678,0.03456789,0.04567890,0.05678901,0.06789012,0.07890123,0.08901234,0.09012345,0.10123456,0.11234567,0.12345678,0.13456789,0.14567890,0.15678901,0.16789012,0.17890123,0.18901234,0.19012345,0.20123456,0.21234567,0.22345678,0.23456789,0.24567890,0.25678901,0.26789012,0.27890123,0.28901234,0.29012345,0.30123456,0.31234567,0.32345678,0.33456789,0.34567890,0.35678901,0.36789012,0.37890123,0.38901234,0.39012345,0.40123456,0.41234567,0.42345678,0.43456789,0.44567890,0.45678901,0.46789012,0.47890123,0.48901234,0.49012345,0.50123456,0.51234567,0.52345678,0.53456789,0.54567890,0.55678901,0.56789012,0.57890123,0.58901234,0.59012345,0.60123456,0.61234567,0.62345678,0.63456789,0.64567890,0.65678901,0.66789012,0.67890123,0.68901234,0.69012345,0.70123456,0.71234567,0.72345678,0.73456789,0.74567890,0.75678901,0.76789012,0.77890123,0.78901234,0.79012345,0.80123456,0.81234567,0.82345678,0.83456789,0.84567890,0.85678901,0.86789012,0.87890123,0.88901234,0.89012345,0.90123456,0.91234567,0.92345678,0.93456789,0.94567890,0.95678901,0.96789012,0.97890123,0.98901234,0.99012345,1.00123456,1.01234567,1.02345678,1.03456789,1.04567890,1.05678901,1.06789012,1.07890123,1.08901234,1.09012345,1.10123456,1.11234567,1.12345678,1.13456789,1.14567890,1.15678901,1.16789012,1.17890123,1.18901234,1.19012345,1.20123456,1.21234567,1.22345678,1.23456789,1.24567890,1.25678901,1.26789012,1.27890123,1.28901234,1.29012345,1.30123456,1.31234567,1.32345678,1.33456789,1.34567890,1.35678901,1.36789012,1.37890123,1.38901234,1.39012345,1.40123456,1.41234567,1.42345678,1.43456789,1.44567890,1.45678901,1.46789012,1.47890123,1.48901234,1.49012345,1.50123456,1.51234567,1.52345678,1.53456789,1.54567890,1.55678901,1.56789012,1.57890123,1.58901234,1.59012345,1.60123456,1.61234567,1.62345678,1.63456789,1.64567890,1.65678901,1.66789012,1.67890123,1.68901234,1.69012345,1.70123456,1.71234567,1.72345678,1.73456789,1.74567890,1.75678901,1.76789012,1.77890123,1.78901234,1.79012345,1.80123456,1.81234567,1.82345678,1.83456789,1.84567890,1.85678901,1.86789012,1.87890123,1.88901234,1.89012345,1.90123456,1.91234567,1.92345678,1.93456789,1.94567890,1.95678901,1.96789012,1.97890123,1.98901234,1.99012345,2.00123456,2.01234567,2.02345678,2.03456789,2.04567890,2.05678901,2.06789012,2.07890123,2.08901234,2.09012345,2.10123456,2.11234567,2.12345678,2.13456789,2.14567890,2.15678901,2.16789012,2.17890123,2.18901234,2.19012345,2.20123456,2.21234567,2.22345678,2.23456789,2.24567890,2.25678901,2.26789012,2.27890123,2.28901234,2.29012345,2.30123456,2.31234567,2.32345678,2.33456789,2.34567890,2.35678901,2.36789012,2.37890123,2.38901234,2.39012345,2.40123456,2.41234567,2.42345678,2.43456789,2.44567890,2.45678901,2.46789012,2.47890123,2.48901234,2.49012345,2.50123456,2.51234567,2.52345678,2.53456789,2.54567890,2.55678901,2.56789012,2.57890123,2.58901234,2.59012345,2.60123456,2.61234567,2.62345678,2.63456789,2.64567890,2.65678901,2.66789012,2.67890123,2.68901234,2.69012345,2.70123456,2.71234567,2.72345678,2.73456789,2.74567890,2.75678901,2.76789012,2.77890123,2.78901234,2.79012345,2.80123456,2.81234567,2.82345678,2.83456789,2.84567890,2.85678901,2.86789012,2.87890123,2.88901234,2.89012345,2.90123456,2.91234567,2.92345678,2.93456789,2.94567890,2.95678901,2.96789012,2.97890123,2.98901234,2.99012345,3.00123456,3.01234567,3.02345678,3.03456789,3.04567890,3.05678901,3.06789012,3.07890123,3.08901234,3.09012345,3.10123456,3.11234567,3.12345678,3.13456789,3.14567890,3.15678901,3.16789012,3.17890123,3.18901234,3.19012345,3.20123456,3.21234567,3.22345678,3.23456789,3.24567890,3.25678901,3.26789012,3.27890123,3.28901234,3.29012345,3.30123456,3.31234567,3.32345678,3.33456789,3.34567890,3.35678901,3.36789012,3.37890123,3.38901234,3.39012345,3.40123456,3.41234567,3.42345678,3.43456789,3.44567890,3.45678901,3.46789012,3.47890123,3.48901234,3.49012345,3.50123456,3.51234567,3.52345678,3.53456789,3.54567890,3.55678901,3.56789012,3.57890123,3.58901234,3.59012345,3.60123456,3.61234567,3.62345678,3.63456789,3.64567890,3.65678901,3.66789012,3.67890123,3.68901234,3.69012345,3.70123456,3.71234567,3.72345678,3.73456789,3.74567890,3.75678901,3.76789012,3.77890123,3.78901234,3.79012345,3.80123456,3.81234567,3.82345678,3.83456789,3.84567890,3.85678901,3.86789012,3.87890123,3.88901234,3.89012345,3.90123456,3.91234567,3.92345678,3.93456789,3.94567890,3.95678901,3.96789012,3.97890123,3.98901234,3.99012345,4.00123456,4.01234567,4.02345678,4.03456789,4.04567890,4.05678901,4.06789012,4.07890123,4.08901234,4.09012345,4.10123456,4.11234567,4.12345678,4.13456789,4.14567890,4.15678901,4.16789012,4.17890123,4.18901234,4.19012345,4.20123456,4.21234567,4.22345678,4.23456789,4.24567890,4.25678901,4.26789012,4.27890123,4.28901234,4.29012345,4.30123456,4.31234567,4.32345678,4.33456789,4.34567890,4.35678901,4.36789012,4.37890123,4.38901234,4.39012345,4.40123456,4.41234567,4.42345678,4.43456789,4.44567890,4.45678901,4.46789012,4.47890123,4.48901234,4.49012345,4.50123456,4.51234567,4.52345678,4.53456789,4.54567890,4.55678901,4.56789012,4.57890123,4.58901234,4.59012345,4.60123456,4.61234567,4.62345678,4.63456789,4.64567890,4.65678901,4.66789012,4.67890123,4.68901234,4.69012345,4.70123456,4.71234567,4.72345678,4.73456789,4.74567890,4.75678901,4.76789012,4.77890123,4.78901234,4.79012345,4.80123456,4.81234567,4.82345678,4.83456789,4.84567890,4.85678901,4.86789012,4.87890123,4.88901234,4.89012345,4.90123456,4.91234567,4.92345678,4.93456789,4.94567890,4.95678901,4.96789012,4.97890123,4.98901234,4.99012345,5.00123456,5.01234567,5.02345678,5.03456789,5.04567890,5.05678901,5.06789012,5.07890123,5.08901234,5.09012345,5.10123456,5.11234567,5.12345678,5.13456789,5.14567890,5.15678901,5.16789012,5.17890123,5.18901234,5.19012345,5.20123456,5.21234567,5.22345678,5.23456789,5.24567890,5.25678901,5.26789012,5.27890123,5.28901234,5.29012345,5.30123456,5.31234567,5.32345678,5.33456789,5.34567890,5.35678901,5.36789012,5.37890123,5.38901234,5.39012345,5.40123456,5.41234567,5.42345678,5.43456789,5.44567890,5.45678901,5.46789012,5.47890123,5.48901234,5.49012345,5.50123456,5.51234567,5.52345678,5.53456789,5.54567890,5.55678901,5.56789012,5.57890123,5.58901234,5.59012345,5.60123456,5.61234567,5.62345678,5.63456789,5.64567890,5.65678901,5.66789012,5.67890123,5.68901234,5.69012345,5.70123456,5.71234567,5.72345678,5.73456789,5.74567890,5.75678901,5.76789012,5.77890123,5.78901234,5.79012345,5.80123456,5.81234567,5.82345678,5.83456789,5.84567890,5.85678901,5.86789012,5.87890123,5.88901234,5.89012345,5.90123456,5.91234567,5.92345678,5.93456789,5.94567890,5.95678901,5.96789012,5.97890123,5.98901234,5.99012345,6.00123456,6.01234567,6.02345678,6.03456789,6.04567890,6.05678901,6.06789012,6.07890123,6.08901234,6.09012345,6.10123456,6.11234567,6.12345678,6.13456789,6.14567890,6.15678901,6.16789012,6.17890123,6.18901234,6.19012345,6.20123456,6.21234567,6.22345678,6.23456789,6.24567890,6.25678901,6.26789012,6.27890123,6.28901234,6.29012345,6.30123456,6.31234567,6.32345678,6.33456789,6.34567890,6.35678901,6.36789012,6.37890123,6.38901234,6.39012345,6.40123456,6.41234567,6.42345678,6.43456789,6.44567890,6.45678901,6.46789012,6.47890123,6.48901234,6.49012345,6.50123456,6.51234567,6.52345678,6.53456789,6.54567890,6.55678901,6.56789012,6.57890123,6.58901234,6.59012345,6.60123456,6.61234567,6.62345678,6.63456789,6.64567890,6.65678901,6.66789012,6.67890123,6.68901234,6.69012345,6.70123456,6.71234567,6.72345678,6.73456789,6.74567890,6.75678901,6.76789012,6.77890123,6.78901234,6.79012345,6.80123456,6.81234567,6.82345678,6.83456789,6.84567890,6.85678901,6.86789012,6.87890123,6.88901234,6.89012345,6.90123456,6.91234567,6.92345678,6.93456789,6.94567890,6.95678901,6.96789012,6.97890123,6.98901234,6.99012345,7.00123456,7.01234567,7.02345678,7.03456789,7.04567890,7.05678901,7.06789012,7.07890123,7.08901234,7.09012345,7.10123456,7.11234567,7.12345678,7.13456789,7.14567890,7.15678901,7.16789012,7.17890123,7.18901234,7.19012345,7.20123456,7.21234567,7.22345678,7.23456789,7.24567890,7.25678901,7.26789012,7.27890123,7.28901234,7.29012345,7.30123456,7.31234567,7.32345678,7.33456789,7.34567890,7.35678901,7.36789012,7.37890123,7.38901234,7.39012345,7.40123456,7.41234567,7.42345678,7.43456789,7.44567890,7.45678901,7.46789012,7.47890123,7.48901234,7.49012345,7.50123456,7.51234567,7.52345678,7.53456789,7.54567890,7.55678901,7.56789012,7.57890123,7.58901234,7.59012345,7.60123456,7.61234567,7.62345678,7.63456789,7.64567890,7.65678901,7.66789012,7.67890123,7.68901234,7.69012345,7.70123456,7.71234567,7.72345678,7.73456789,7.74567890,7.75678901,7.76789012,7.77890123,7.78901234,7.79012345,7.80123456,7.81234567,7.82345678,7.83456789,7.84567890,7.85678901,7.86789012,7.87890123,7.88901234,7.89012345,7.90123456,7.91234567,7.92345678,7.93456789,7.94567890,7.95678901,7.96789012,7.97890123,7.98901234,7.99012345,8.00123456,8.01234567,8.02345678,8.03456789,8.04567890,8.05678901,8.06789012,8.07890123,8.08901234,8.09012345,8.10123456,8.11234567,8.12345678,8.13456789,8.14567890,8.15678901,8.16789012,8.17890123,8.18901234,8.19012345,8.20123456,8.21234567,8.22345678,8.23456789,8.24567890,8.25678901,8.26789012,8.27890123,8.28901234,8.29012345,8.30123456,8.31234567,8.32345678,8.33456789,8.34567890,8.35678901,8.36789012,8.37890123,8.38901234,8.39012345,8.40123456,8.41234567,8.42345678,8.43456789,8.44567890,8.45678901,8.46789012,8.47890123,8.48901234,8.49012345,8.50123456,8.51234567,8.52345678,8.53456789,8.54567890,8.55678901,8.56789012,8.57890123,8.58901234,8.59012345,8.60123456,8.61234567,8.62345678,8.63456789,8.64567890,8.65678901,8.66789012,8.67890123,8.68901234,8.69012345,8.70123456,8.71234567,8.72345678,8.73456789,8.74567890,8.75678901,8.76789012,8.77890123,8.78901234,8.79012345,8.80123456,8.81234567,8.82345678,8.83456789,8.84567890,8.85678901,8.86789012,8.87890123,8.88901234,8.89012345,8.90123456,8.91234567,8.92345678,8.93456789,8.94567890,8.95678901,8.96789012,8.97890123,8.98901234,8.99012345,9.00123456,9.01234567,9.02345678,9.03456789,9.04567890,9.05678901,9.06789012,9.07890123,9.08901234,9.09012345,9.10123456,9.11234567,9.12345678,9.13456789,9.14567890,9.15678901,9.16789012,9.17890123,9.18901234,9.19012345,9.20123456,9.21234567,9.22345678,9.23456789,9.24567890,9.25678901,9.26789012,9.27890123,9.28901234,9.29012345,9.30123456,9.31234567,9.32345678,9.33456789,9.34567890,9.35678901,9.36789012,9.37890123,9.38901234,9.39012345,9.40123456,9.41234567,9.42345678,9.43456789,9.44567890,9.45678901,9.46789012,9.47890123,9.48901234,9.49012345,9.50123456,9.51234567,9.52345678,9.53456789,9.54567890,9.55678901,9.56789012,9.57890123,9.58901234,9.59012345,9.60123456,9.61234567,9.62345678,9.63456789,9.64567890,9.65678901,9.66789012,9.67890123,9.68901234,9.69012345,9.70123456,9.71234567,9.72345678,9.73456789,9.74567890,9.75678901,9.76789012,9.77890123,9.78901234,9.79012345,9.80123456,9.81234567,9.82345678,9.83456789,9.84567890,9.85678901,9.86789012,9.87890123,9.88901234,9.89012345,9.90123456,9.91234567,9.92345678,9.93456789,9.94567890,9.95678901,9.96789012,9.97890123,9.98901234,9.99012345,10.00123456,10.01234567,10.02345678,10.03456789,10.04567890,10.05678901,10.06789012,10.07890123,10.08901234,10.09012345,10.10123456,10.11234567,10.12345678,10.13456789,10.14567890,10.15678901,10.16789012,10.17890123,10.18901234,10.19012345,10.20123456,10.21234567,10.22345678,10.23456789,10.24567890,10.25678901,10.26789012,10.27890123,10.28901234,10.29012345,10.30123456,10.31234567,10.32345678,10.33456789,10.34567890,10.35678901,10.36789012,10.37890123,10.38901234,10.39012345,10.40123456,10.41234567,10.42345678,10.43456789,10.44567890,10.45678901,10.46789012,10.47890123,10.48901234,10.49012345,10.50123456,10.51234567,10.52345678,10.53456789,10.54567890,10.55678901,10.56789012,10.57890123,10.58901234,10.59012345,10.60123456,10.61234567,10.62345678,10.63456789,10.64567890,10.65678901,10.66789012,10.67890123,10.68901234,10.69012345,10.70123456,10.71234567,10.72345678,10.73456789,10.74567890,10.75678901,10.76789012,10.77890123,10.78901234,10.79012345,10.80123456,10.81234567,10.82345678,10.83456789,10.84567890,10.85678901,10.86789012,10.87890123,10.88901234,10.89012345,10.90123456,10.91234567,10.92345678,10.93456789,10.94567890,10.95678901,10.96789012,10.97890123,10.98901234,10.99012345,11.00123456,11.01234567,11.02345678,11.03456789,11.04567890,11.05678901,11.06789012,11.07890123,11.08901234,11.09012345,11.10123456,11.11234567,11.12345678,11.13456789,11.14567890,11.15678901,11.16789012,11.17890123,11.18901234,11.19012345,11.20123456,11.21234567,11.22345678,11.23456789,11.24567890,11.25678901,11.26789012,11.27890123,11.28901234,11.29012345,11.30123456,11.31234567,11.32345678,11.33456789,11.34567890,11.35678901,11.36789012,11.37890123,11.38901234,11.39012345,11.40123456,11.41234567,11.42345678,11.43456789,11.44567890,11.45678901,11.46789012,11.47890123,11.48901234,11.49012345,11.50123456,11.51234567,11.52345678,11.53456789,11.54567890,11.55678901,11.56789012,11.57890123,11.58901234,11.59012345,11.60123456,11.61234567,11.62345678,11.63456789,11.64567890,11.65678901,11.66789012,11.67890123,11.68901234,11.69012345,11.70123456,11.71234567,11.72345678,11.73456789,11.74567890,11.75678901,11.76789012,11.77890123,11.78901234,11.79012345,11.80123456,11.81234567,11.82345678,11.83456789,11.84567890,11.85678901,11.86789012,11.87890123,11.88901234,11.89012345,11.90123456,11.91234567,11.92345678,11.93456789,11.94567890,11.95678901,11.96789012,11.97890123,11.98901234,11.99012345,12.00123456,12.01234567,12.02345678,12.03456789,12.04567890,12.05678901,12.06789012,12.07890123,12.08901234,12.09012345,12.10123456,12.11234567,12.12345678,12.13456789,12.14567890,12.15678901,12.16789012,12.17890123,12.18901234,12.19012345,12.20123456,12.21234567,12.22345678,12.23456789,12.24567890,12.25678901,12.26789012,12.27890123,12.28901234,12.29012345,12.30123456,12.31234567,12.32345678,12.33456789,12.34567890,12.35678901,12.36789012,12.37890123,12.38901234,12.39012345,12.40123456,12.41234567,12.42345678,12.43456789,12.44567890,12.45678901,12.46789012,12.47890123,12.48901234,12.49012345,12.50123456,12.51234567,12.52345678,12.53456789,12.54567890,12.55678901,12.56789012,12.57890123,12.58901234,12.59012345,12.60123456,12.61234567,12.62345678,12.63456789,12.64567890,12.65678901,12.66789012,12.67890123,12.68901234,12.69012345,12.70123456,12.71234567,12.72345678,12.73456789,12.74567890,12.75678901,12.76789012,12.77890123,12.78901234,12.79012345,12.80123456,12.81234567,12.82345678,12.83456789,12.84567890,12.85678901,12.86789012,12.87890123,12.88901234,12.89012345,12.90123456,12.91234567,12.92345678,12.93456789,12.94567890,12.95678901,12.96789012,12.97890123,12.98901234,12.99012345,13.00123456,13.01234567,13.02345678,13.03456789,13.04567890,13.05678901,13.06789012,13.07890123,13.08901234,13.09012345,13.10123456,13.11234567,13.12345678,13.13456789,13.14567890,13.15678901,13.16789012,13.17890123,13.18901234,13.19012345,13.20123456,13.21234567,13.22345678,13.23456789,13.24567890,13.25678901,13.26789012,13.27890123,13.28901234,13.29012345,13.30123456,13.31234567,13.32345678,13.33456789,13.34567890,13.35678901,13.36789012,13.37890123,13.38901234,13.39012345,13.40123456,13.41234567,13.42345678,13.43456789,13.44567890,13.45678901,13.46789012,13.47890123,13.48901234,13.49012345,13.50123456,13.51234567,13.52345678,13.53456789,13.54567890,13.55678901,13.56789012,13.57890123,13.58901234,13.59012345,13.60123456,13.61234567,13.62345678,13.63456789,13.64567890,13.65678901,13.66789012,13.67890123,13.68901234,13.69012345,13.70123456,13.71234567,13.72345678,13.73456789,13.74567890,13.75678901,13.76789012,13.77890123,13.78901234,13.79012345,13.80123456,13.81234567,13.82345678,13.83456789,13.84567890,13.85678901,13.86789012,13.87890123,13.88901234,13.89012345,13.90123456,13.91234567,13.92345678,13.93456789,13.94567890,13.95678901,13.96789012,13.97890123,13.98901234,13.99012345,14.00123456,14.01234567,14.02345678,14.03456789,14.04567890,14.05678901,14.06789012,14.07890123,14.08901234,14.09012345,14.10123456,14.11234567,14.12345678,14.13456789,14.14567890,14.15678901,14.16789012,14.17890123,14.18901234,14.19012345,14.20123456,14.21234567,14.22345678,14.23456789,14.24567890,14.25678901,14.26789012,14.27890123,14.28901234,14.29012345,14.30123456,14.31234567,14.32345678,14.33456789,14.34567890,14.35678901,14.36789012,14.37890123,14.38901234,14.39012345,14.40123456,14.41234567,14.42345678,14.43456789,14.44567890,14.45678901,14.46789012,14.47890123,14.48901234,14.49012345,14.50123456,14.51234567,14.52345678,14.53456789,14.54567890,14.55678901,14.56789012,14.57890123,14.58901234,14.59012345,14.60123456,14.61234567,14.62345678,14.63456789,14.64567890,14.65678901,14.66789012,14.67890123,14.68901234,14.69012345,14.70123456,14.71234567,14.72345678,14.73456789,14.74567890,14.75678901,14.76789012,14.77890123,14.78901234,14.79012345,14.80123456,14.81234567,14.82345678,14.83456789,14.84567890,14.85678901,14.86789012,14.87890123,14.88901234,14.89012345,14.90123456,14.91234567,14.92345678,14.93456789,14.94567890,14.95678901,14.96789012,14.97890123,14.98901234,14.99012345,15.00123456,15.01234567,15.02345678,15.03456789,15.04567890,15.05678901,15.06789012,15.07890123,15.08901234,15.09012345,15.10123456,15.11234567,15.12345678,15.13456789,15.14567890,15.15678901,15.16789012,15.17890123,15.18901234,15.19012345,15.20123456,15.21234567,15.22345678,15.23456789,15.24567890,15.25678901,15.26789012,15.27890123,15.28901234,15.29012345,15.30123456,15.31234567,15.32345678,15.33456789,15.34567890,15.35678901,15.36789012,15.37890123,15.38901234,15.39012345,15.40123456,15.41234567,15.42345678,15.43456789,15.44567890,15.45678901,15.46789012,15.47890123,15.48901234,15.49012345,15.50123456,15.51234567,15.52345678,15.53456789,15.54567890,15.55678901,15.56789012,15.57890123,15.58901234,15.59012345,15.60123456,15.61234567,15.62345678,15.63456789,15.64567890,15.65678901,15.66789012,15.67890123,15.68901234,15.69012345,15.70123456,15.71234567,15.72345678,15.73456789,15.74567890,15.75678901,15.76789012,15.77890123,15.78901234,15.79012345,15.80123456,15.81234567,15.82345678,15.83456789,15.84567890,15.85678901,15.86789012,15.87890123,15.88901234,15.89012345,15.90123456,15.91234567,15.92345678,15.93456789,15.94567890,15.95678901,15.96789012,15.97890123,15.98901234,15.99012345,16.00123456,16.01234567,16.02345678,16.03456789,16.04567890,16.05678901,16.06789012,16.07890123,16.08901234,16.09012345,16.10123456,16.11234567,16.12345678,16.13456789,16.14567890,16.15678901,16.16789012,16.17890123,16.18901234,16.19012345,16.20123456,16.21234567,16.22345678,16.23456789,16.24567890,16.25678901,16.26789012,16.27890123,16.28901234,16.29012345,16.30123456,16.31234567,16.32345678,16.33456789,16.34567890,16.35678901,16.36789012,16.37890123,16.38901234,16.39012345,16.40123456,16.41234567,16.42345678,16.43456789,16.44567890,16.45678901,16.46789012,16.47890123,16.48901234,16.49012345,16.50123456,16.51234567,16.52345678,16.53456789,16.54567890,16.55678901,16.56789012,16.57890123,16.58901234,16.59012345,16.60123456,16.61234567,16.62345678,16.63456789,16.64567890,16.65678901,16.66789012,16.67890123,16.68901234,16.69012345,16.70123456,16.71234567,16.72345678,16.73456789,16.74567890,16.75678901,16.76789012,16.77890123,16.78901234,16.79012345,16.80123456,16.81234567,16.82345678,16.83456789,16.84567890,16.85678901,16.86789012,16.87890123,16.88901234,16.89012345,16.90123456,16.91234567,16.92345678,16.93456789,16.94567890,16.95678901,16.96789012,16.97890123,16.98901234,16.99012345,17.00123456,17.01234567,17.02345678,17.03456789,17.04567890,17.05678901,17.06789012,17.07890123,17.08901234,17.09012345,17.10123456,17.11234567,17.12345678,17.13456789,17.14567890,17.15678901,17.16789012,17.17890123,17.18901234,17.19012345,17.20123456,17.21234567,17.22345678,17.23456789,17.24567890,17.25678901,17.26789012,17.27890123,17.28901234,17.29012345,17.30123456,17.31234567,17.32345678,17.33456789,17.34567890,17.35678901,17.36789012,17.37890123,17.38901234,17.39012345,17.40123456,17.41234567,17.42345678,17.43456789,17.44567890,17.45678901,17.46789012,17.47890123,17.48901234,17.49012345,17.50123456,17.51234567,17.52345678,17.53456789,17.54567890,17.55678901,17.56789012,17.57890123,17.58901234,17.59012345,17.60123456,17.61234567,17.62345678,17.63456789,17.64567890,17.65678901,17.66789012,17.67890123,17.68901234,17.69012345,17.70123456,17.71234567,17.72345678,17.73456789,17.74567890,17.75678901,17.76789012,17.77890123,17.78901234,17.79012345,17.80123456,17.81234567,17.82345678,17.83456789,17.84567890,17.85678901,17.86789012,17.87890123,17.88901234,17.89012345,17.90123456,17.91234567,17.92345678,17.93456789,17.94567890,17.95678901,17.96789012,17.97890123,17.98901234,17.99012345,18.00123456,18.01234567,18.02345678,18.03456789,18.04567890,18.05678901,18.06789012,18.07890123,18.08901234,18.09012345,18.10123456,18.11234567,18.12345678,18.13456789,18.14567890,18.15678901,18.16789012,18.17890123,18.18901234,18.19012345,18.20123456,18.21234567,18.22345678,18.23456789,18.24567890,18.25678901,18.26789012,18.27890123,18.28901234,18.29012345,18.30123456,18.31234567,18.32345678,18.33456789,18.34567890,18.35678901,18.36789012,18.37890123,18.38901234,18.39012345,18.40123456,18.41234567,18.42345678,18.43456789,18.44567890,18.45678901,18.46789012,18.47890123,18.48901234,18.49012345,18.50123456,18.51234567,18.52345678,18.53456789,18.54567890,18.55678901,18.56789012,18.57890123,18.58901234,18.59012345,18.60123456,18.61234567,18.62345678,18.63456789,18.64567890,18.65678901,18.66789012,18.67890123,18.68901234,18.69012345,18.70123456,18.71234567,18.72345678,18.73456789,18.74567890,18.75678901,18.76789012,18.77890123,18.78901234,18.79012345,18.80123456,18.81234567,18.82345678,18.83456789,18.84567890,18.85678901,18.86789012,18.87890123,18.88901234,18.89012345,18.90123456,18.91234567,18.92345678,18.93456789,18.94567890,18.95678901,18.96789012,18.97890123,18.98901234,18.99012345,19.00123456,19.01234567,19.02345678,19.03456789,19.04567890,19.05678901,19.06789012,19.07890123,19.08901234,19.09012345,19.10123456,19.11234567,19.12345678,19.13456789,19.14567890,19.15678901,19.16789012,19.17890123,19.18901234,19.19012345,19.20123456,19.21234567,19.22345678,19.23456789,19.24567890,19.25678901,19.26789012,19.27890123,19.28901234,19.29012345,19.30123456,19.31234567,19.32345678,19.33456789,19.34567890,19.35678901,19.36789012,19.37890123,19.38901234,19.39012345,19.40123456,19.41234567,19.42345678,19.43456789,19.44567890,19.45678901,19.46789012,19.47890123,19.48901234,19.49012345,19.50123456,19.51234567,19.52345678,19.53456789,19.54567890,19.55678901,19.56789012,19.57890123,19.58901234,19.59012345,19.60123456,19.61234567,19.62345678,19.63456789,19.64567890,19.65678901,19.66789012,19.67890123,19.68901234,19.69012345,19.70123456,19.71234567,19.72345678,19.73456789,19.74567890,19.75678901,19.76789012,19.77890123,19.78901234,19.79012345,19.80123456,19.81234567,19.82345678,19.83456789,19.84567890,19.85678901,19.86789012,19.87890123,19.88901234,19.89012345,19.90123456,19.91234567,19.92345678,19.93456789,19.94567890,19.95678901,19.96789012,19.97890123,19.98901234,19.99012345,20.00123456];
      
      // Skip OpenAI API call and use known embedding
      const embeddingData = {
        data: [{
          embedding: knownWorkingEmbedding
        }]
      };
      
      console.log('üß™ Using known embedding, length:', knownWorkingEmbedding.length);
      console.log('üß™ First 5 values:', knownWorkingEmbedding.slice(0, 5));
      
      // Test the exact SQL query that worked
      console.log('üß™ Testing direct SQL query first...');
      try {
        const directSqlResult = await supabaseClient
          .from('brands')
          .select('id, name, creators, product_category, description')
          .eq('approval_status', 'approved')
          .limit(5);
        
        console.log('üß™ Direct SQL query result:', {
          error: directSqlResult.error,
          count: directSqlResult.data?.length,
          firstBrand: directSqlResult.data?.[0]
        });
      } catch (e) {
        console.error('üß™ Direct SQL query failed:', e);
      }
      
      // Jump to similarity search
      console.log('üóÑÔ∏è Initializing Supabase client...');
      const supabaseClient = createClient(
        supabaseUrl,
        supabaseKey,
        {
          auth: {
            autoRefreshToken: false,
            persistSession: false,
          },
        }
      );

      // Perform similarity search with known embedding
      console.log('üîç Calling match_brands RPC function with known embedding...');
      
      // First, let's check if the function exists
      console.log('üîç Checking if match_brands function exists...');
      try {
        const functionCheck = await supabaseClient
          .rpc('match_brands', {
            query_embedding: [0.1, 0.2, 0.3], // dummy small vector
            match_threshold: 0.0,
            match_count: 1
          });
        console.log('üîç Function exists check result:', {
          error: functionCheck.error?.message,
          errorCode: functionCheck.error?.code,
          hasData: !!functionCheck.data
        });
      } catch (e) {
        console.error('üîç Function check failed:', e);
      }
      
      let matches, searchError;
      try {
        console.log('üîç About to call match_brands with parameters:');
        console.log('üîç - query_embedding length:', knownWorkingEmbedding.length);
        console.log('üîç - match_threshold:', 0.0);
        console.log('üîç - match_count:', 10);
        
        const result = await supabaseClient.rpc(
          'match_brands',
          {
            query_embedding: knownWorkingEmbedding,
            match_threshold: 0.0,
            match_count: 10
          }
        );
        
        matches = result.data;
        searchError = result.error;
        
        console.log('üîç RPC call completed with known embedding:');
        console.log('üîç - Error:', searchError);
        console.log('üîç - Error code:', searchError?.code);
        console.log('üîç - Error message:', searchError?.message);
        console.log('üîç - Error details:', searchError?.details);
        console.log('üîç - Matches count:', matches?.length);
        console.log('üîç - Matches type:', typeof matches);
        console.log('üîç - First match:', matches?.[0]);
        console.log('üîç - Raw result object keys:', Object.keys(result));
      } catch (e) {
        console.error('‚ùå RPC call failed with exception:', e);
        console.error('‚ùå Exception type:', typeof e);
        console.error('‚ùå Exception message:', e.message);
        console.error('‚ùå Exception stack:', e.stack);
        throw new Error(`Database search failed: ${e.message}`);
      }

      if (searchError) {
        console.error('‚ùå Database search error:', searchError);
        throw new Error(`Database search error: ${searchError.message}`);
      }

      if (!matches) {
        console.log('‚ö†Ô∏è No matches returned from RPC call');
        return new Response(
          JSON.stringify({ 
            results: [] 
          }), {
            headers: {
              'Content-Type': 'application/json',
              ...corsHeaders,
            },
          }
        );
      }

      console.log('‚úÖ Semantic search completed successfully with known embedding');
      console.log('‚úÖ Returning', matches.length, 'results');
      console.log('üîç All matches:', JSON.stringify(matches, null, 2));
      
      return new Response(
        JSON.stringify({
          results: matches,
        }), {
          headers: {
            'Content-Type': 'application/json',
            ...corsHeaders,
          },
        }
      );
    }

    // Generate embedding for search query using OpenAI API directly
    console.log('ü§ñ Calling OpenAI API for embedding...');
    
    let embeddingResponse;
    try {
      embeddingResponse = await fetch('https://api.openai.com/v1/embeddings', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${openAiKey}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          model: 'text-embedding-3-small',
          input: query,
          encoding_format: 'float',
        }),
      });
      console.log('ü§ñ OpenAI response status:', embeddingResponse.status);
    } catch (e) {
      console.error('‚ùå OpenAI fetch error:', e);
      throw new Error(`OpenAI API request failed: ${e.message}`);
    }

    if (!embeddingResponse.ok) {
      const errorText = await embeddingResponse.text();
      console.error('‚ùå OpenAI API error response:', errorText);
      throw new Error(`OpenAI API error: ${embeddingResponse.status} ${embeddingResponse.statusText}`);
    }

    let embeddingData;
    try {
      embeddingData = await embeddingResponse.json();
      console.log('ü§ñ OpenAI embedding received, length:', embeddingData.data?.[0]?.embedding?.length);
      console.log('ü§ñ First 5 embedding values:', embeddingData.data?.[0]?.embedding?.slice(0, 5));
    } catch (e) {
      console.error('‚ùå Failed to parse OpenAI response:', e);
      throw new Error('Failed to parse OpenAI response');
    }

    if (!embeddingData.data?.[0]?.embedding) {
      console.error('‚ùå No embedding in OpenAI response');
      throw new Error('Failed to generate query embedding');
    }

    // Initialize Supabase client
    console.log('üóÑÔ∏è Initializing Supabase client...');
    const supabaseClient = createClient(
      supabaseUrl,
      supabaseKey,
      {
        auth: {
          autoRefreshToken: false,
          persistSession: false,
        },
      }
    );

    // Perform similarity search
    console.log('üîç Calling match_brands RPC function...');
    console.log('üîç Parameters:', {
      embedding_length: embeddingData.data[0].embedding.length,
      match_threshold: 0.0,
      match_count: 10
    });

    // Add detailed logging for the embedding vector
    console.log('üîç Sending query_embedding to match_brands RPC:');
    console.log('üîç First 5 values of query_embedding:', embeddingData.data[0].embedding.slice(0, 5));
    console.log('üîç Last 5 values of query_embedding:', embeddingData.data[0].embedding.slice(-5));
    console.log('üîç Full query_embedding length:', embeddingData.data[0].embedding.length);
    // console.log('üîç Full query_embedding (CAUTION: very long):', embeddingData.data[0].embedding); // Uncomment for full vector if needed

    let matches, searchError;
    try {
      const result = await supabaseClient.rpc(
        'match_brands',
        {
          query_embedding: embeddingData.data[0].embedding,
          match_threshold: 0.0,
          match_count: 10
        }
      );
      matches = result.data;
      searchError = result.error;
      
      console.log('üîç RPC call completed');
      console.log('üîç Error:', searchError);
      console.log('üîç Matches count:', matches?.length);
      console.log('üîç First match:', matches?.[0]);
    } catch (e) {
      console.error('‚ùå RPC call failed:', e);
      throw new Error(`Database search failed: ${e.message}`);
    }

    if (searchError) {
      console.error('‚ùå Database search error:', searchError);
      throw new Error(`Database search error: ${searchError.message}`);
    }

    if (!matches) {
      console.log('‚ö†Ô∏è No matches returned from RPC call');
      return new Response(
        JSON.stringify({ 
          results: [] 
        }), {
          headers: {
            'Content-Type': 'application/json',
            ...corsHeaders,
          },
        }
      );
    }

    console.log('‚úÖ Semantic search completed successfully');
    console.log('‚úÖ Returning', matches.length, 'results');
    console.log('üîç All matches:', JSON.stringify(matches, null, 2));
    
    return new Response(
      JSON.stringify({
        results: matches,
      }), {
        headers: {
          'Content-Type': 'application/json',
          ...corsHeaders,
        },
      }
    );

  } catch (error) {
    console.error('üí• Semantic search function error:', error);

    // Return a structured error response
    return new Response(
      JSON.stringify({
        error: error.message || 'An unexpected error occurred',
        success: false,
      }), {
        status: error.status || 500,
        headers: {
          'Content-Type': 'application/json',
          ...corsHeaders,
        },
      }
    );
  }
});