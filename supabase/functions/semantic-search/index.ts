import { createClient } from 'npm:@supabase/supabase-js@2.39.7';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

Deno.serve(async (req) => {
  // Always return proper CORS headers for OPTIONS requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { 
      headers: { ...corsHeaders },
      status: 204
    });
  }

  try {
    console.log('üöÄ Semantic search function started');

    // Validate environment variables
    const supabaseUrl = Deno.env.get('SUPABASE_URL');
    const supabaseKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY');
    const openAiKey = Deno.env.get('OPENAI_API_KEY');

    console.log('üîß Environment check:', {
      supabaseUrl: !!supabaseUrl,
      supabaseKey: !!supabaseKey,
      openAiKey: !!openAiKey
    });

    if (!supabaseUrl || !supabaseKey || !openAiKey) {
      console.error('‚ùå Missing environment variables');
      throw new Error('Missing required environment variables');
    }

    // Parse request body
    let body;
    try {
      body = await req.json();
      console.log('üì• Request body received:', body);
    } catch (e) {
      console.error('‚ùå Failed to parse request body:', e);
      throw new Error('Invalid JSON in request body');
    }

    if (!body || !body.query) {
      console.error('‚ùå No query provided in request');
      return new Response(
        JSON.stringify({ 
          error: 'Search query is required' 
        }), {
          status: 400,
          headers: {
            'Content-Type': 'application/json',
            ...corsHeaders,
          },
        }
      );
    }

    const { query } = body;
    console.log('üîç Search query:', query);

    // TEMPORARY: Test with known working embedding for "happi"
    if (query.toLowerCase() === 'happi') {
      console.log('üß™ Using known working embedding for HAPPI test');
      const knownWorkingEmbedding = [0.010850532,-0.016603699,0.0026194793,0.02644072,0.040003885,-0.04060007,-0.024339175,0.035294037,-0.0110070305,-0.024920452,0.0153666185,0.0093675265,-0.017229691,0.034548808,0.0028467742,0.018541293,-0.0092035765,0.018079251,0.019823087,0.033177588,0.03141885,0.016096944,0.023787705,0.022669861,0.026679194,0.015277191,-0.07452288,0.014435083,0.026634479,-0.039646175,0.0025468196,-0.032611214,0.055504646,-0.02921297,-0.0047210245,0.022938143,-0.01442763,0.013227812,-0.026992189,-0.05031785,-0.032700643,-0.027901368,0.04370022,-0.0115808565,-0.022178011,-0.02575511,0.009263194,0.023176618,0.02973463,0.10319929,-0.022714576,-0.018317726,-0.014159348,0.04864854,-0.04125587,-0.029034115,0.037112396,0.02413051,-0.020270225,0.015545473,0.04826102,-0.016096944,0.041077014,-0.022520816,-0.01640994,-0.012817936,-0.03869228,0.020374557,-0.025352685,0.022848716,0.037201826,0.07184006,0.030032722,-0.033237208,-0.012586915,-0.029809155,-0.01621618,0.00022566461,0.057323,-0.0078099985,0.006554288,0.025322877,-0.067726396,-0.021939537,-0.00921848,-0.067368686,-0.061228003,-0.0027685252,0.0034299158,-0.016931599,0.033535298,0.029302398,0.013265073,0.039318275,0.044505067,-0.06659365,-0.030852474,0.0021760683,-0.0065990016,0.0018025222,0.029287493,-0.007008877,0.022327056,-0.00051653676,0.006118329,0.011424358,-0.068262964,-0.012206849,0.00485144,0.018899003,-0.038274955,-0.0015826798,-0.04438583,0.044534877,0.00077736686,0.009106697,0.07404594,-0.03830476,0.04653209,0.022043869,-0.043193463,0.03064381,-0.017691733,-0.011819329,-0.041434724,0.033982437,-0.013510999,0.038483616,-0.012042898,-0.055445027,0.009471859,0.039705794,0.013525903,-0.0024648444,0.007381492,-0.03902018,-0.025307972,0.012557106,-0.02644072,-0.012363346,0.01915238,-0.08125975,0.06629556,-0.025278162,0.015426237,-0.0087117255,-0.020598125,0.01915238,-0.035055567,-0.037142206,-0.03183618,-0.03773839,-0.011066648,-0.023191521,-0.0475456,0.0066586197,-0.011439263,-0.034101672,-0.052344874,0.013712211,-0.06295694,0.0032696915,-0.0257253,-0.026396006,0.019212,0.033743963,-0.05252373,0.0021220392,-0.061764568,-0.006587823,-0.0105971545,-0.0066511673,-0.014047564,0.021432782,0.032283314,-0.04301461,0.041404914,0.006304636,-0.06128762,0.011387097,0.049155295,0.04972167,0.021089977,-0.022178011,-0.015307001,-0.007545442,-0.034310337,0.05914136,-0.013272526,-0.053537242,-0.0078099985,0.0076758573,0.015843565,0.026947476,0.017125359,-0.028974498,0.03174675,0.022341961,-0.004858892,0.02080679,-0.02998801,-0.030584192,-0.02556135,0.009591095,-0.039199036,0.0090396255,-0.04757541,0.027111426,0.03767877,-0.04122606,0.046263807,0.022938143,-0.016722936,0.053030483,-0.040719304,-0.018764863,0.04677056,0.014703365,-0.03276026,0.058962505,-0.045160867,0.028393218,0.05565369,-0.028676406,-0.012124874,0.048111975,-0.024592552,-0.03281988,-0.009047078,0.045518577,-0.0038081193,0.034668047,-0.020031752,-0.017334023,-0.035055567,-0.0010880341,0.009732689,0.01136474,0.0073479563,0.03559213,-0.021298641,0.02748404,0.02308719,0.012445321,-0.0046055145,-0.02927259,-0.024741597,-0.0033963805,-0.0026436993,0.023459803,0.021611637,0.012676342,-0.045250297,-0.013198003,-0.006181673,-0.022028964,0.0015025677,0.018079251,-0.022997763,-0.027618181,0.009211029,0.004415481,0.005656287,-0.009032174,-0.045131058,-0.0045682527,0.032939114,0.024637265,-0.02396656,0.018839385,0.025874346,-0.04793312,0.06128762,0.00038146402,-0.016365226,0.041434724,0.031239994,0.0057233577,0.0054886104,0.016067134,-0.033654533,-0.016663317,0.052046783,-0.0014960469,0.000403588,0.0057904283,0.028124936,-0.016201274,0.035621937,-0.005138353,-0.000885425,-0.033714153,0.0142189665,-0.003644169,0.04095778,0.04823121,-0.0011122541,-0.055504646,0.0037075134,-0.035770986,0.03913942,0.019271618,-0.016886886,-0.018347533,0.022476101,0.02852736,-0.031985223,-0.003871464,-0.014949291,0.030554382,-0.05595178,-0.032581404,0.045280106,-0.0021089977,-0.013630236,-0.027498944,0.0051830667,0.045608006,0.0062860055,-0.0031169197,0.036516212,0.019748565,0.039288465,0.0064946692,-0.03627774,-0.030584192,-0.012013089,-0.09461425,0.023459803,0.0013209181,-0.027424421,0.0056115733,-0.065460905,0.026574861,-0.050288044,-0.00048113838,0.01761721,-0.02973463,-0.042776138,0.0034504095,-0.046323426,-0.043431938,-0.049065866,-0.017050836,-0.046383042,0.040689494,0.012706152,0.020627934,-0.016722936,0.022640053,-0.016797459,0.0035566047,0.012109969,-0.025322877,0.024055988,0.008704273,0.04083854,-0.010038232,-0.029496158,0.048082165,-0.06021449,0.017244596,0.011454168,-0.0029511063,0.02047889,-0.0007405712,-0.058694225,-0.0071840063,0.00120075,-0.011864043,-0.0075827036,0.02973463,-0.0068002134,-0.009538929,-0.052732393,0.012885007,0.019778373,-0.0115808565,0.007321873,-0.00010788352,0.022714576,0.022401579,-0.05815766,0.010008424,0.015307001,0.010150017,0.015001456,0.0066511673,-0.0041360203,-0.018019633,0.03869228,-0.0070871264,0.0017606032,-0.02077698,0.017512878,-0.06391083,-0.040987585,0.03594984,-0.061108764,0.0035081648,-0.0008262725,-0.023951655,0.008734082,-0.010537536,-0.012326085,0.03904999,-0.01869034,0.025874346,0.04969186,-0.006517026,0.011193337,-0.029034115,0.046353236,0.01761721,0.00014007973,-0.016946504,-0.0146288425,-0.03064381,-0.029540872,0.005197971,0.0050973655,-0.050645754,-0.042865563,-0.020553412,-0.009211029,0.008190065,0.034489192,-0.0107611045,0.035770986,-0.0475456,0.02113469,-0.006323267,-0.011841686,0.046561897,0.011282764,-0.01462139,0.011029387,-0.032879498,-0.005578038,-0.003176538,-0.019003335,-0.00060223805,0.004080128,0.0035472894,-0.017825874,-0.045190677,-0.010053137,0.007370313,-0.027960986,-0.045160867,-0.016678222,0.015061075,0.001986035,-0.0033423514,-0.004162103,-0.001072198,-0.02380261,-0.026068104,-0.0017438355,0.0062114825,0.026738811,-0.007388944,-0.006509574,-0.020404365,0.017408546,0.0051830667,-0.051748693,0.002684687,-0.03881152,-0.01621618,-0.0144648915,-0.006688429,0.04933415,0.00048998796,-0.0040950323,0.033058353,0.023668468,-0.0033404883,0.029451445,-0.015001456,-0.012177039,0.013995398,-0.0054438966,0.009591095,0.015739234,0.020762077,0.054848842,-0.01305641,-0.01364514,0.020329842,-0.0052501373,0.03690373,0.0045421696,-0.019122573,-0.037201826,-0.004236626,0.052911248,-0.024354078,-0.018735053,-0.017319119,-0.021581827,-0.016067134,-0.058724035,0.03732106,0.041375104,0.008070828,0.013607879,0.0059506525,-0.00013216167,0.03144866,-0.0055407765,0.0302861,-0.010090399,-0.033177588,0.009628356,0.018481676,0.0005710316,0.0106791295,-0.03064381,-0.0073554087,-0.018377343,0.040778924,-0.002843048,-0.0560114,-0.004884975,0.012817936,0.00703496,-0.08125975,-0.05738262,-0.010135112,-0.007877069,-0.013965589,0.0024760228,0.004132294,0.006897093,0.006196578,0.021149594,-0.036367167,0.028974498,-0.009009817,-0.006900819,0.006144412,-0.01433075,0.0015491445,0.0045794314,0.010567345,0.00020645167,0.010202182,-0.0015277191,-0.020851504,-0.008391277,-0.005864951,0.024219938,-0.0013963726,0.046591707,-0.014681009,0.0010293473,0.005399183,0.0021108608,0.04617438,0.013719663,-0.028586978,-0.002919434,-0.013667497,-0.01882448,0.055772927,-0.0013619057,-0.004009331,-0.0021760683,-0.008741534,-0.0067033335,0.001678628,0.006587823,-0.03660564,0.0014243186,0.0098593775,0.025442112,-0.0060773413,-0.006662346,-0.015277191,-0.023996368,-0.048111975,-0.03246217,-0.009710331,0.0143009415,-0.0052016973,-0.025054595,0.0067070597,-0.008592488,0.027379708,-0.0017298624,-0.0133172395,0.05914136,0.043521363,-0.033386253,-0.014204062,-0.0048216307,0.031925604,-0.0073516825,-0.01488222,-0.013704758,-0.06420892,0.059022125,-0.036486406,-0.009561286,0.022103488,-0.066832125,0.0065766447,0.007869617,-0.020389462,0.0053246603,-0.015590187,0.030360622,-0.010604607,0.0062114825,0.015113241,0.009531477,0.0012426691,0.012542201,-0.028080223,0.004594336,0.006617632,-0.0024722966,0.044117548,-0.03943751,0.037082586,-0.011804425,-0.038930755,0.021835206,-0.034131482,0.033416063,0.0066548935,0.017527783,-0.0016721073,-0.015150502,0.009307908,-0.01863072,0.008592488,0.042388618,-0.023012666,-0.002891488,0.0061071506,0.011603213,-0.025412304,0.027886463,-0.01797492,0.012124874,0.019226905,0.034519,-0.028870165,0.044683922,-0.022297246,0.011558499,-0.019256713,0.01471827,-0.027871558,-0.045131058,-0.0007005151,-0.032939114,-0.008659559,0.026097914,0.0015025677,0.0029119817,-0.033714153,-0.013734568,0.024368983,-0.008980008,-0.0067294165,-0.010403395,0.0024872012,0.06170495,0.010500275,0.039556745,0.0016199412,0.055146936,-0.004884975,0.007728023,-0.042329,0.032641023,0.0045198128,0.013846352,-0.021119786,-0.044773348,-0.010805818,0.020896217,0.014599033,-0.008577584,0.015590187,-0.0034466835,0.0016171467,-0.030941902,-0.014859864,-0.008182613,0.014658651,0.038424,-0.010157469,0.057889376,-0.027960986,-0.0025151474,0.022654956,0.004180734,0.0087117255,0.008748987,-0.022222724,-0.025486827,0.012169587,0.016171467,0.029704822,0.030017817,0.01797492,-0.0028467742,0.008279492,-0.017751351,0.0069119977,-0.0026232055,0.03726144,-0.0056749177,0.0056674653,0.019674042,0.0009799759,0.00630091,-0.016842172,-0.012452774,-0.014420178,0.012758317,0.031627513,0.014271133,0.0027294008,-0.004911058,0.027826846,0.012750866,0.03100152,0.03240255,0.006636263,0.002088504,0.019286523,-0.020016847,-0.03806629,0.004452742,-0.0065021217,0.021089977,-0.015605092,-0.0049483194,-0.0214924,-0.009464406,-0.0065021217,0.004367041,0.0101053035,-0.0253974,-0.013779282,0.01569452,0.013838899,-0.029913485,0.0071504707,0.048827395,-0.0077950936,-0.053984378,-0.0028728573,0.006878462,-0.0044564684,0.062479988,0.056935485,0.011066648,0.009084339,0.0211645,-0.00086632854,-0.008458347,-0.045697432,-0.037559535,-0.0030796581,0.034995947,0.015783947,0.025382495,-0.016201274,0.003096426,-0.029183162,-0.024547838,-0.01813887,-0.017960016,0.045160867,-0.04086835,-0.0107462,-0.008316754,0.006226387,-0.048469685,-0.021075072,0.0072697075,-0.0011849139,-0.03147847,-0.0015957212,-0.032700643,-0.0074970024,-0.0595885,-0.0041136635,0.008860771,0.005246411,0.022789098,-0.014755531,-0.033624727,0.035443082,-0.03070343,-0.0028020605,-0.004288792,-0.009479311,0.018735053,-0.0020605577,-0.016961409,0.044087738,-0.015813757,0.0064648604,-0.02445841,0.0034187373,-0.013287431,-0.00639779,0.020270225,0.013987945,-0.022505911,-0.022341961,-0.016588794,0.02006156,0.059290405,-0.021060167,0.05183812,-0.043670412,0.0036460322,0.026291674,0.01143181,-0.0017680555,-0.0030908366,0.018720148,-0.032015033,0.0071392925,0.022505911,-0.021805396,-0.0078919735,0.034399763,0.034012243,0.016782554,-0.05779995,0.012855197,0.010045685,0.054759417,-0.01445744,0.003407559,0.011819329,0.016827267,-0.012840293,-0.0283336,-0.013630236,0.04823121,-0.030494764,-0.00071122777,0.0028188282,0.03144866,0.007027508,0.017796066,-0.014040112,-0.012922268,0.02520364,-0.002375417,-0.005842594,0.0032603762,0.032909308,-0.013190551,0.03177656,-0.00028947482,0.012467679,-0.021760682,0.0027834298,-0.043551173,0.024950262,0.033326633,0.0101053035,-0.046681136,-0.012117421,-0.023757895,0.01673784,-0.03797686,0.0241007,-0.010768557,0.029421635,0.0067033335,-0.00970288,0.03171694,0.011543595,0.0050787344,-0.03144866,0.034548808,0.0030386706,0.022267438,-0.0015631175,0.028631693,-0.0035621938,-0.016007517,0.015090884,0.033893008,0.008823509,0.04045102,0.008495609,0.024592552,-0.021253927,-0.00027736486,-0.05771052,0.02624696,0.0029734632,0.023892038,0.04998995,-0.021611637,0.015545473,0.003750364,-0.007288338,-0.017289309,-0.00801121,-0.014062468,-0.016186371,0.013242717,-0.04823121,0.0073181475,0.020568317,-0.011334931,0.016201274,0.0097774025,0.022327056,-0.003435505,-0.009837021,-0.010440656,-0.011759711,0.018943718,-0.0024424875,-0.009814664,-0.009524025,-0.018735053,-0.019331235,0.01794511,-0.004959498,0.05425266,0.038155716,0.0031895794,0.0076758573,-0.017334023,-0.02341509,0.015679615,-0.0021034083,-0.018347533,0.043759838,0.011372192,-0.013615331,-0.011461619,0.014517058,-0.028050413,0.008607393,-0.012527297,0.044803157,0.015411332,-0.0022822632,0.009434598,0.014509605,0.0099413525,-0.0013637688,0.044028122,-0.029615395,0.026694097,0.006662346,-0.07154197,0.01898843,0.029496158,-0.015560378,0.016946504,0.0153666185,0.04083854,-0.007593882,0.0019338689,0.016126752,0.037440296,0.06444739,-0.024398793,0.028572073,-0.04855911,0.037827816,-0.011074101,0.028318696,0.055385407,0.0011215694,0.009360074,-0.026858049,-0.00042920525,0.02569549,0.033684343,0.011774615,0.013160742,-0.0015258561,-0.010544988,-0.022908336,-0.009814664,-0.015798852,0.0025784918,-0.007705666,-0.011454168,0.01126786,0.006975342,-0.04507144,-0.0022338235,0.007899426,0.02819946,-0.00862975,0.006207756,0.016708031,-0.02924278,0.0041919122,-0.012735961,0.034519,-0.02520364,-0.0064536817,-0.0062226607,-0.021865014,0.01866053,0.003983248,0.017810969,-0.030912092,-0.012281371,0.006639989,0.01572433,0.03979522,-0.030554382,-0.022908336,-0.012572011,0.022997763,0.009211029,-0.0052389586,0.017736446,0.03943751,0.0020680102,-0.011223147,-0.0143009415,0.01673784,0.0040764017,-0.028050413,-0.0057233577,0.011334931,-0.034161292,-0.0010395943,-0.0051681623,-0.034966137,0.0018546883,-0.021894824,0.024756502,0.014837506,0.0050787344,0.010328872,0.025218545,-0.0071504707,-0.005499789,0.0012696836,0.002790882,0.010537536,0.022133296,0.019629328,-0.014271133,0.035115182,-0.0020195702,-0.0031430027,0.0038342024,-0.0076162387,0.00048020683,-0.00012866841,-0.0031318243,-0.011670284,-0.009926449,0.00568237,0.04927453,0.029481253,0.0088756755,0.02025532,0.0031895794,-0.026097914,0.00023579506,0.018928813,-0.02006156,-0.0055966685,-0.015515665,-0.009479311,-0.024011273,0.018809576,0.0050936393,-0.034310337,-0.02289343,0.019316332,0.008294397,-0.025665682,0.035174802,0.0052799466,-0.006461134,-0.013004243,-0.018347533,-0.004307423,-0.042716518,0.022833811,0.033296824,0.066116706,-0.0047396556,-0.00074196846,0.020553412,0.03985484,0.010403395,-0.012735961,-0.033654533,-0.036098886,-0.036367167,-0.03216408,-0.025814727,-0.0022058773,0.004993033,0.02100055,0.010708938,-0.04012312,0.0037242812,-0.006382885,-0.032521788,0.015225025,-0.012534749,0.030763047,-0.00898746,-0.0017158894,-0.023206426,0.016544081,-0.02100055,0.015813757,-0.01934614,-0.02712633,0.018228298,0.010701486,-0.0055668596,0.027141234,-0.023176618,0.011223147,0.03586041,0.0299582,0.01976347,0.012422965,0.019554805,0.02536759,-0.030271195,-0.009464406,-0.0044117547,-0.016439749,-0.049870715,-0.006386611,0.11273822,-0.042895373,-0.042090524,-0.013600427,-0.013473738,-0.011118814,-0.00018560856,0.007094579,0.011946019,0.024175223,0.00007795792,0.0061518643,-0.041524153,0.04709846,-0.010343776,0.019137478,0.006688429,-0.0009324676,-0.03213427,-0.017393641,0.025710395,0.024950262,0.015843565,-0.013756924,-0.018287916,-0.045995526,-0.0137271155,0.008689368,-0.01208016,0.025650777,0.040987585,0.058008615,-0.008413633,0.021924634,0.0062673744,0.003487671,-0.023787705,-0.008532871,-0.0087937005,-0.02426465,-0.006177947,0.0035063017,0.016111847,-0.02374299,0.024205033,0.012162135,0.015515665,-0.010910151,-0.01250494,0.0120056365,0.00921848,-0.010716391,-0.029719727,0.020031752,-0.0012612998,0.008130447,-0.017348928,0.01169264,0.015008909,0.015769042,-0.020687552,-0.011334931,0.025948869,-0.025680587,0.005607847,0.026872952,0.00008494445,0.0065468354,0.0029920938,-0.013250169,-0.01172245,0.01638013,0.054669987,-0.027528754,0.01778116,-0.026858049,-0.027111426,0.020240415,0.006766678,-0.043044418,0.0049483194,0.026723906,-0.004083854,0.039318275,-0.021581827,0.03204484,0.0078099985,-0.015217573,-0.0048216307,0.0023698278,-0.016842172,0.042418428,-0.016007517,-0.018943718,0.0004834672,-0.004829083,-0.007049865,0.020359652,0.009896639,0.018571103,-0.00957619,-0.01260182,-0.012996791,-0.02338528,-0.023370376,-0.025978677,-0.021060167,0.01591809,0.034012243,-0.0507948,0.02305738,0.028408123,0.025307972,-0.029540872,0.004907332,-0.03839419,0.0068821884,-0.086088836,0.019808182,0.0013991671,0.021194309,0.019107668,-0.0036888828,-0.0073479563,0.013436476,0.026679194,-0.012557106,0.0074858237,0.006662346,-0.020001942,0.004646502,-0.0012575737,0.023981465,0.022938143,-0.0035286585,0.030971712,0.011744807,-0.016454654,-0.00039287534,-0.010492822,0.004836535,-0.031299613,0.017006122,-0.016350321,-0.0016832857,0.04080873,-0.00620403,0.03836438,0.0032324302,-0.0017699185,-0.006226387,-0.018243203,0.027618181,0.017497974,0.035830602,0.03144866,0.001614352,0.00516071,0.0053581954,-0.016126752,0.019226905,-0.013920875,-0.019972133,-0.015456046,-0.01214723,-0.023668468,0.004680037,0.010671677,-0.0015258561,-0.01572433,0.016067134,-0.011729902,-0.02849755,-0.031925604,-0.012288824,0.008033567,-0.028020605,0.052911248,0.0074373838,-0.0074038487,-0.031955414,-0.02484593,0.0033665714,-0.013212907,0.018541293,0.002790882,-0.0153666185,-0.010828176,-0.027424421,-0.02113469,-0.010328872,0.03761915,0.005686096,0.013831448,-0.040361594,0.034101672,-0.0058537726,-0.014487249,-0.005905939,-0.02891488,0.0037485012,-0.014017754,-0.0041136635,0.023161713,-0.0037354596,-0.013510999,-0.0016581342,-0.03979522,-0.02627677,-0.033296824,0.015828662,-0.0021797945,-0.031538084,0.0066772504,0.014867315,0.022297246,0.019033145,-0.018615816,0.010574797,0.0015826798,0.00088682235,-0.01797492,-0.009635809,-0.017676828,-0.010202182,-0.0024853381,0.029362017,-0.010023328,-0.017140264,-0.022207819,0.06456663,-0.04197129,0.014994005,-0.033028543,-0.023072286,0.0016562712,-0.02322133,-0.009784855,-0.001280862,0.0058165113,-0.045697432,-0.012057803,0.0055407765,-0.0044303853,0.004225448,0.018347533,0.03100152,-0.000058803213,-0.01898843,0.018839385,0.01585847,0.0138910655,0.027528754,-0.00794414,0.037529726,0.024368983,-0.009926449,-0.0017997277,-0.012490035,-0.046710946,-0.042895373,-0.0022431388,-0.0023008941,0.021775587,-0.033684343,0.007959045,0.03132942,0.006796487,0.010336325,-0.010097851,-0.015843565,0.01797492,-0.020508697,0.013004243,0.013823995,0.0031467287,0.0066586197,-0.003960891,-0.0010116482,-0.031210184,0.0031076043,-0.010239445,0.009710331,-0.0069939727,-0.013548261,-0.014062468,0.038930755,0.03723163,-0.01312348,0.016886886,0.0029566954,-0.0033758867,0.024205033,-0.005913391,0.017691733,0.032253504,0.03174675,-0.03243236,-0.032730453,-0.016722936,0.026545051,-0.020389462,-0.024368983,-0.00012016815,0.011767164,-0.015873374,0.031239994,-0.0070834,0.0048998795,-0.009196124,0.021701064,-0.0048887013,0.03180637,0.013235264,-0.005891034,0.029973105,0.024562743,0.011029387,0.012348442,-0.013578069,0.049423575,0.019003335,0.03982503,0.005559407,-0.008391277,-0.040629875,0.010254349,0.01234099,0.0241007,-0.003618086,0.0039310823,0.027662896,0.028408123,0.02396656,0.015083432,0.0037559534,-0.0051271743,-0.030882284,0.020598125,-0.047068655,-0.018064348,-0.0019972133,-0.0018248791,0.0066437153,-0.032342933,-0.0037000612,0.009956257,-0.00007312558,-0.01794511,0.013153289,0.04125587,-0.03012215,-0.015426237,-0.019450473,-0.015470951,-0.025129117,0.040063504,-0.006517026,-0.01904805,-0.023161713,0.0028821726,-0.034101672,0.0015128145,-0.018213393,0.0007061043,0.014926934,-0.034548808,0.045011822,-0.01322036,-0.03210446,-0.0022785373,-0.023847323,-0.0067070597,-0.019331235,-0.019584615,-0.028840356,0.0075081806,-0.013212907,-0.014844959,-0.00007545442,-0.022625148,-0.014613938,-0.006073615,-0.01918219,0.02338528,0.0019431842,-0.025263257,-0.04891682,-0.008190065];
      
      // Skip OpenAI API call and use known embedding
      const embeddingData = {
        data: [{
          embedding: knownWorkingEmbedding
        }]
      };
      
      console.log('üß™ Using known embedding, length:', knownWorkingEmbedding.length);
      console.log('üß™ First 5 values:', knownWorkingEmbedding.slice(0, 5));
      
      // Test the exact SQL query that worked
      console.log('üß™ Testing direct SQL query first...');
      try {
        const directSqlResult = await supabaseClient
          .from('brands')
          .select('id, name, creators, product_category, description')
          .eq('approval_status', 'approved')
          .limit(5);
        
        console.log('üß™ Direct SQL query result:', {
          error: directSqlResult.error,
          count: directSqlResult.data?.length,
          firstBrand: directSqlResult.data?.[0]
        });
      } catch (e) {
        console.error('üß™ Direct SQL query failed:', e);
      }
      
      // Jump to similarity search
      console.log('üóÑÔ∏è Initializing Supabase client...');
      const supabaseClient = createClient(
        supabaseUrl,
        supabaseKey,
        {
          auth: {
            autoRefreshToken: false,
            persistSession: false,
          },
        }
      );

      // Perform similarity search with known embedding
      console.log('üîç Calling match_brands RPC function with known embedding...');
      
      // First, let's check if the function exists
      console.log('üîç Checking if match_brands function exists...');
      try {
        const functionCheck = await supabaseClient
          .rpc('match_brands', {
            query_embedding: [0.1, 0.2, 0.3], // dummy small vector
            match_threshold: 0.0,
            match_count: 1
          });
        console.log('üîç Function exists check result:', {
          error: functionCheck.error?.message,
          errorCode: functionCheck.error?.code,
          hasData: !!functionCheck.data
        });
      } catch (e) {
        console.error('üîç Function check failed:', e);
      }
      
      let matches, searchError;
      try {
        console.log('üîç About to call match_brands with parameters:');
        console.log('üîç - query_embedding length:', knownWorkingEmbedding.length);
        console.log('üîç - match_threshold:', 0.0);
        console.log('üîç - match_count:', 10);
        
        const result = await supabaseClient.rpc(
          'match_brands',
          {
            query_embedding: knownWorkingEmbedding,
            match_threshold: 0.0,
            match_count: 10
          }
        );
        
        matches = result.data;
        searchError = result.error;
        
        console.log('üîç RPC call completed with known embedding:');
        console.log('üîç - Error:', searchError);
        console.log('üîç - Error code:', searchError?.code);
        console.log('üîç - Error message:', searchError?.message);
        console.log('üîç - Error details:', searchError?.details);
        console.log('üîç - Matches count:', matches?.length);
        console.log('üîç - Matches type:', typeof matches);
        console.log('üîç - First match:', matches?.[0]);
        console.log('üîç - Raw result object keys:', Object.keys(result));
      } catch (e) {
        console.error('‚ùå RPC call failed with exception:', e);
        console.error('‚ùå Exception type:', typeof e);
        console.error('‚ùå Exception message:', e.message);
        console.error('‚ùå Exception stack:', e.stack);
        throw new Error(`Database search failed: ${e.message}`);
      }

      if (searchError) {
        console.error('‚ùå Database search error:', searchError);
        throw new Error(`Database search error: ${searchError.message}`);
      }

      if (!matches) {
        console.log('‚ö†Ô∏è No matches returned from RPC call');
        return new Response(
          JSON.stringify({ 
            results: [] 
          }), {
            headers: {
              'Content-Type': 'application/json',
              ...corsHeaders,
            },
          }
        );
      }

      console.log('‚úÖ Semantic search completed successfully with known embedding');
      console.log('‚úÖ Returning', matches.length, 'results');
      console.log('üîç All matches:', JSON.stringify(matches, null, 2));
      
      return new Response(
        JSON.stringify({
          results: matches,
        }), {
          headers: {
            'Content-Type': 'application/json',
            ...corsHeaders,
          },
        }
      );
    }

    // Generate embedding for search query using OpenAI API directly
    console.log('ü§ñ Calling OpenAI API for embedding...');
    
    let embeddingResponse;
    try {
      embeddingResponse = await fetch('https://api.openai.com/v1/embeddings', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${openAiKey}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          model: 'text-embedding-3-small',
          input: query,
          encoding_format: 'float',
        }),
      });
      console.log('ü§ñ OpenAI response status:', embeddingResponse.status);
    } catch (e) {
      console.error('‚ùå OpenAI fetch error:', e);
      throw new Error(`OpenAI API request failed: ${e.message}`);
    }

    if (!embeddingResponse.ok) {
      const errorText = await embeddingResponse.text();
      console.error('‚ùå OpenAI API error response:', errorText);
      throw new Error(`OpenAI API error: ${embeddingResponse.status} ${embeddingResponse.statusText}`);
    }

    let embeddingData;
    try {
      embeddingData = await embeddingResponse.json();
      console.log('ü§ñ OpenAI embedding received, length:', embeddingData.data?.[0]?.embedding?.length);
      console.log('ü§ñ First 5 embedding values:', embeddingData.data?.[0]?.embedding?.slice(0, 5));
    } catch (e) {
      console.error('‚ùå Failed to parse OpenAI response:', e);
      throw new Error('Failed to parse OpenAI response');
    }

    if (!embeddingData.data?.[0]?.embedding) {
      console.error('‚ùå No embedding in OpenAI response');
      throw new Error('Failed to generate query embedding');
    }

    // Test 2: Check how many brands have embeddings
    console.log('üß™ Checking brands with embeddings...');
    try {
      const embeddingCountResult = await supabaseClient
        .from('brands')
        .select('id, name, embedding')
        .not('embedding', 'is', null)
        .limit(5);
      
      console.log('üß™ Brands with embeddings:', {
        error: embeddingCountResult.error?.message,
        count: embeddingCountResult.data?.length,
        firstBrand: embeddingCountResult.data?.[0] ? {
          id: embeddingCountResult.data[0].id,
          name: embeddingCountResult.data[0].name,
          hasEmbedding: !!embeddingCountResult.data[0].embedding
        } : null
      });
    } catch (e) {
      console.error('üß™ Embedding count check failed:', e);
    }
    
    // Initialize Supabase client
    console.log('üóÑÔ∏è Initializing Supabase client...');
    const supabaseClient = createClient(
      supabaseUrl,
      supabaseKey,
      {
        auth: {
          autoRefreshToken: false,
          persistSession: false,
        },
      }
    );

    // Perform similarity search
    console.log('üîç Calling match_brands RPC function...');
    console.log('üîç Parameters:', {
      embedding_length: embeddingData.data[0].embedding.length,
      match_threshold: 0.0,
      match_count: 10
    });

    // Add detailed logging for the embedding vector
    console.log('üîç Sending query_embedding to match_brands RPC:');
    console.log('üîç First 5 values of query_embedding:', embeddingData.data[0].embedding.slice(0, 5));
    console.log('üîç Last 5 values of query_embedding:', embeddingData.data[0].embedding.slice(-5));
    console.log('üîç Full query_embedding length:', embeddingData.data[0].embedding.length);
    // console.log('üîç Full query_embedding (CAUTION: very long):', embeddingData.data[0].embedding); // Uncomment for full vector if needed

    let matches, searchError;
    try {
      const result = await supabaseClient.rpc(
        'match_brands',
        {
          query_embedding: embeddingData.data[0].embedding,
          match_threshold: 0.0,
          match_count: 10
        }
      );
      matches = result.data;
      searchError = result.error;
      
      console.log('üîç RPC call completed');
      console.log('üîç Error:', searchError);
      console.log('üîç Matches count:', matches?.length);
      console.log('üîç First match:', matches?.[0]);
    } catch (e) {
      console.error('‚ùå RPC call failed:', e);
      throw new Error(`Database search failed: ${e.message}`);
    }

    if (searchError) {
      console.error('‚ùå Database search error:', searchError);
      throw new Error(`Database search error: ${searchError.message}`);
    }

    if (!matches) {
      console.log('‚ö†Ô∏è No matches returned from RPC call');
      return new Response(
        JSON.stringify({ 
          results: [] 
        }), {
          headers: {
            'Content-Type': 'application/json',
            ...corsHeaders,
          },
        }
      );
    }

    console.log('‚úÖ Semantic search completed successfully');
    console.log('‚úÖ Returning', matches.length, 'results');
    console.log('üîç All matches:', JSON.stringify(matches, null, 2));
    
    return new Response(
      JSON.stringify({
        results: matches,
      }), {
        headers: {
          'Content-Type': 'application/json',
          ...corsHeaders,
        },
      }
    );

  } catch (error) {
    console.error('üí• Semantic search function error:', error);

    // Return a structured error response
    return new Response(
      JSON.stringify({
        error: error.message || 'An unexpected error occurred',
        success: false,
      }), {
        status: error.status || 500,
        headers: {
          'Content-Type': 'application/json',
          ...corsHeaders,
        },
      }
    );
  }
});